// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vision.Data;

#nullable disable

namespace Vision.Migrations.CRMDB
{
    [DbContext(typeof(CRMDBContext))]
    [Migration("20230201092822_AddNewModelsFromOldPr")]
    partial class AddNewModelsFromOldPr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Vision.Models.AdContent", b =>
                {
                    b.Property<long>("AdContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdContentId"), 1L, 1);

                    b.Property<int>("AdTemplateConfigId")
                        .HasColumnType("int");

                    b.Property<long>("ClassifiedAdId")
                        .HasColumnType("bigint");

                    b.HasKey("AdContentId");

                    b.HasIndex("AdTemplateConfigId");

                    b.HasIndex("ClassifiedAdId");

                    b.ToTable("AdContent", (string)null);
                });

            modelBuilder.Entity("Vision.Models.AdContentValue", b =>
                {
                    b.Property<long>("AdContentValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdContentValueId"), 1L, 1);

                    b.Property<long>("AdContentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdContentValueId");

                    b.HasIndex("AdContentId");

                    b.ToTable("AdContentValue", (string)null);
                });

            modelBuilder.Entity("Vision.Models.AddListing", b =>
                {
                    b.Property<int>("AddListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddListingId"), 1L, 1);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPeroson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingBanner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainLocataion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddListingId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.ToTable("AddListings");
                });

            modelBuilder.Entity("Vision.Models.AdTemplateConfig", b =>
                {
                    b.Property<int>("AdTemplateConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdTemplateConfigId"), 1L, 1);

                    b.Property<string>("AdTemplateFieldCaptionAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AdTemplateFieldCaptionEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ClassifiedAdsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("ValidationMessageAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationMessageEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdTemplateConfigId");

                    b.HasIndex("ClassifiedAdsCategoryId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("AdTemplateConfig");
                });

            modelBuilder.Entity("Vision.Models.AdTemplateOption", b =>
                {
                    b.Property<int>("AdTemplateOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdTemplateOptionId"), 1L, 1);

                    b.Property<int>("AdTemplateConfigId")
                        .HasColumnType("int");

                    b.Property<string>("OptionAr")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OptionEn")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("AdTemplateOptionId");

                    b.HasIndex("AdTemplateConfigId");

                    b.ToTable("AdTemplateOption");
                });

            modelBuilder.Entity("Vision.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.HasIndex("AddListingId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Vision.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryPic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryTitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryTitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Vision.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityTlAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityTlEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAd", b =>
                {
                    b.Property<long>("ClassifiedAdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClassifiedAdId"), 1L, 1);

                    b.Property<int?>("ClassifiedAdsCategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UseId")
                        .HasColumnType("text");

                    b.Property<int?>("Views")
                        .HasColumnType("int");

                    b.HasKey("ClassifiedAdId");

                    b.HasIndex("ClassifiedAdsCategoryId");

                    b.ToTable("ClassifiedAd", (string)null);
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAdsCategory", b =>
                {
                    b.Property<int>("ClassifiedAdsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassifiedAdsCategoryId"), 1L, 1);

                    b.Property<string>("ClassifiedAdsCategoryDescAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassifiedAdsCategoryDescEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ClassifiedAdsCategoryIsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassifiedAdsCategoryParentId")
                        .HasColumnType("int");

                    b.Property<string>("ClassifiedAdsCategoryPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ClassifiedAdsCategorySortOrder")
                        .HasColumnType("int");

                    b.Property<string>("ClassifiedAdsCategoryTitleAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassifiedAdsCategoryTitleEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassifiedAdsCategoryId");

                    b.HasIndex(new[] { "ClassifiedAdsCategoryParentId" }, "IX_ClassifiedAdsCategory_ClassifiedAdsCategoryParentId");

                    b.ToTable("ClassifiedAdsCategory", (string)null);
                });

            modelBuilder.Entity("Vision.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Vision.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryTlAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryTlEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Vision.Models.EntityType", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityTypeId"), 1L, 1);

                    b.Property<string>("EntityTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityTypeId");

                    b.ToTable("EntityTypes");
                });

            modelBuilder.Entity("Vision.Models.FAQ", b =>
                {
                    b.Property<int>("FAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQId"), 1L, 1);

                    b.Property<string>("AnswerAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Vision.Models.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouriteId"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouriteId");

                    b.HasIndex("AddListingId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("Vision.Models.FavouriteClassified", b =>
                {
                    b.Property<int>("FavouriteClassifiedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouriteClassifiedId"), 1L, 1);

                    b.Property<long>("ClassifiedAdId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouriteClassifiedId");

                    b.HasIndex("ClassifiedAdId");

                    b.ToTable("FavouriteClassifieds");
                });

            modelBuilder.Entity("Vision.Models.FavouriteProfile", b =>
                {
                    b.Property<int>("FavouriteProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouriteProfileId"), 1L, 1);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouriteProfileId");

                    b.ToTable("FavouriteProfiles");
                });

            modelBuilder.Entity("Vision.Models.FieldType", b =>
                {
                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FieldTypeTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FieldTypeId");

                    b.ToTable("FieldType");
                });

            modelBuilder.Entity("Vision.Models.FolowClassified", b =>
                {
                    b.Property<int>("FolowClassifiedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolowClassifiedId"), 1L, 1);

                    b.Property<long>("ClassifiedAdId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FolowClassifiedId");

                    b.HasIndex("ClassifiedAdId");

                    b.ToTable("FolowClassifieds");
                });

            modelBuilder.Entity("Vision.Models.FolowProfile", b =>
                {
                    b.Property<int>("FolowProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolowProfileId"), 1L, 1);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FolowProfileId");

                    b.ToTable("FolowProfile");
                });

            modelBuilder.Entity("Vision.Models.Folwers", b =>
                {
                    b.Property<int>("FolwersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolwersId"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FolwersId");

                    b.HasIndex("AddListingId");

                    b.ToTable("Folwers");
                });

            modelBuilder.Entity("Vision.Models.ListingPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddListingId");

                    b.ToTable("ListingPhotos");
                });

            modelBuilder.Entity("Vision.Models.ListingVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddListingId");

                    b.ToTable("ListingVideos");
                });

            modelBuilder.Entity("Vision.Models.PageContent", b =>
                {
                    b.Property<int>("PageContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageContentId"), 1L, 1);

                    b.Property<string>("ContentAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageContentId");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Vision.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationId"), 1L, 1);

                    b.Property<long>("ClassifiedAdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("QuotationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuotationId");

                    b.HasIndex("ClassifiedAdId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Vision.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("AddListingId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("AddListingId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Vision.Models.SoicialMidiaLink", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Instgramlink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInlink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApplink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facebooklink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SoicialMidiaLinks");
                });

            modelBuilder.Entity("Vision.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryID"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryPic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryTitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryTitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryID");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Vision.Models.AdContent", b =>
                {
                    b.HasOne("Vision.Models.AdTemplateConfig", "AdTemplateConfig")
                        .WithMany("AdContents")
                        .HasForeignKey("AdTemplateConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vision.Models.ClassifiedAd", "ClassifiedAd")
                        .WithMany("AdContents")
                        .HasForeignKey("ClassifiedAdId")
                        .IsRequired()
                        .HasConstraintName("FK_AdContent_ClassifiedAd");

                    b.Navigation("AdTemplateConfig");

                    b.Navigation("ClassifiedAd");
                });

            modelBuilder.Entity("Vision.Models.AdContentValue", b =>
                {
                    b.HasOne("Vision.Models.AdContent", "AdContent")
                        .WithMany("AdContentValues")
                        .HasForeignKey("AdContentId")
                        .IsRequired()
                        .HasConstraintName("FK_AdContentValue_AdContent");

                    b.Navigation("AdContent");
                });

            modelBuilder.Entity("Vision.Models.AddListing", b =>
                {
                    b.HasOne("Vision.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vision.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Category");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Vision.Models.AdTemplateConfig", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAdsCategory", "ClassifiedAdsCategory")
                        .WithMany("AdTemplateConfigs")
                        .HasForeignKey("ClassifiedAdsCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_AdTemplateConfig_ClassifiedAdsCategory");

                    b.HasOne("Vision.Models.FieldType", "FieldType")
                        .WithMany("AdTemplateConfigs")
                        .HasForeignKey("FieldTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AdTemplateConfig_FieldType");

                    b.Navigation("ClassifiedAdsCategory");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Vision.Models.AdTemplateOption", b =>
                {
                    b.HasOne("Vision.Models.AdTemplateConfig", "AdTemplateConfig")
                        .WithMany("AdTemplateOptions")
                        .HasForeignKey("AdTemplateConfigId")
                        .IsRequired()
                        .HasConstraintName("FK_AdTemplateOption_AdTemplateConfig");

                    b.Navigation("AdTemplateConfig");
                });

            modelBuilder.Entity("Vision.Models.Branch", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany("Branches")
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.City", b =>
                {
                    b.HasOne("Vision.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAd", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAdsCategory", "ClassifiedAdsCategory")
                        .WithMany("ClassifiedAds")
                        .HasForeignKey("ClassifiedAdsCategoryId")
                        .HasConstraintName("FK_ClassifiedAd_ClassifiedAdsCategory");

                    b.Navigation("ClassifiedAdsCategory");
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAdsCategory", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAdsCategory", "ClassifiedAdsCategoryParent")
                        .WithMany("InverseClassifiedAdsCategoryParent")
                        .HasForeignKey("ClassifiedAdsCategoryParentId")
                        .HasConstraintName("FK_ClassifiedAdsCategory_ClassifiedAdsCategory");

                    b.Navigation("ClassifiedAdsCategoryParent");
                });

            modelBuilder.Entity("Vision.Models.Favourite", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany()
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.FavouriteClassified", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAd", "ClassifiedAd")
                        .WithMany()
                        .HasForeignKey("ClassifiedAdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassifiedAd");
                });

            modelBuilder.Entity("Vision.Models.FolowClassified", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAd", "ClassifiedAd")
                        .WithMany()
                        .HasForeignKey("ClassifiedAdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassifiedAd");
                });

            modelBuilder.Entity("Vision.Models.Folwers", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany()
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.ListingPhotos", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany("ListingPhotos")
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.ListingVideos", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany("ListingVideos")
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.Quotation", b =>
                {
                    b.HasOne("Vision.Models.ClassifiedAd", "ClassifiedAd")
                        .WithMany("Quotations")
                        .HasForeignKey("ClassifiedAdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassifiedAd");
                });

            modelBuilder.Entity("Vision.Models.Review", b =>
                {
                    b.HasOne("Vision.Models.AddListing", "AddListing")
                        .WithMany("Reviews")
                        .HasForeignKey("AddListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddListing");
                });

            modelBuilder.Entity("Vision.Models.SubCategory", b =>
                {
                    b.HasOne("Vision.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Vision.Models.AdContent", b =>
                {
                    b.Navigation("AdContentValues");
                });

            modelBuilder.Entity("Vision.Models.AddListing", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("ListingPhotos");

                    b.Navigation("ListingVideos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Vision.Models.AdTemplateConfig", b =>
                {
                    b.Navigation("AdContents");

                    b.Navigation("AdTemplateOptions");
                });

            modelBuilder.Entity("Vision.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAd", b =>
                {
                    b.Navigation("AdContents");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("Vision.Models.ClassifiedAdsCategory", b =>
                {
                    b.Navigation("AdTemplateConfigs");

                    b.Navigation("ClassifiedAds");

                    b.Navigation("InverseClassifiedAdsCategoryParent");
                });

            modelBuilder.Entity("Vision.Models.Country", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Vision.Models.FieldType", b =>
                {
                    b.Navigation("AdTemplateConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
